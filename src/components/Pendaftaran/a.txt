export default function Daftar() {
  const [alternatif, setAlternatif] = useState('');
  // const [kriteria, setKriteria] = useState('');
  let [nilai_real, setNilaiReal] = useState('');
  // const [existingData, setExistingData] = useState([]);
  const [ambilAlt, setAmbilAlt] = useState([]);
  const [ambilKriteria, setAmbilKriteria] = useState([]);
  const navigate = useNavigate();

  const onSubmit = async (e) => {
    e.preventDefault();
    try {
        const nilaiRealArray = [];
        ambilKriteria.forEach((item) => {
        if (nilai_real[item.nama_kriteria] !== undefined) {
          nilaiRealArray.push({
            nama_kriteria: item.nama_kriteria,
            nilai_real: nilai_real[item.nama_kriteria]
            });
          }
        });
// console.log(nilaiRealArray)
      const fuzzyAndKeterangan = nilaiRealArray.map(({ nama_kriteria, nilai_real }) => {
        let fuzzyValue, keteranganValue;
        if (nama_kriteria === "Rata - Rata Nilai Rapot") {
          if (nilai_real <= 70) {
            fuzzyValue = 1;
            keteranganValue = "Kurang Baik";
          } else if (nilai_real > 70 && nilai_real <= 80) {
            fuzzyValue = 2;
            keteranganValue = "Cukup";
          } else if (nilai_real > 80 && nilai_real <= 90) {
            fuzzyValue = 3;
            keteranganValue = "Baik";
          } else if (nilai_real > 90) {
            fuzzyValue = 4;
            keteranganValue = "Sangat Baik";
          }
        } else if (nama_kriteria === "Usia") {
          if (nilai_real <= 10) {
            fuzzyValue = 1;
            keteranganValue = "Kurang Baik";
          } else if (nilai_real == 11) {
            fuzzyValue = 2;
            keteranganValue = "Cukup";
          } else if (nilai_real == 12) {
            fuzzyValue = 3;
            keteranganValue = "Baik";
          } else if (nilai_real == 13) {
            fuzzyValue = 4;
            keteranganValue = "Sangat Baik";
          }
        } else if (nama_kriteria === "Jarak") {
          if (nilai_real > 2000) {
            fuzzyValue = 1;
            keteranganValue = "Kurang Baik";
          } else if (nilai_real > 1000 && nilai_real <= 2000) {
            fuzzyValue = 2;
            keteranganValue = "Cukup";
          } else if (nilai_real > 500 && nilai_real <= 1000) {
            fuzzyValue = 3;
            keteranganValue = "Baik";
          } else if (nilai_real < 500) {
            fuzzyValue = 4;
            keteranganValue = "Sangat Baik";
          }
        }
        return {
          nama_kriteria,
          nilai_fuzzy: fuzzyValue,
          keterangan: keteranganValue
        };
      });
// console.log(fuzzyAndKeterangan)
    await axios.post("/nilai_alternatif", {
      nama_alternatif: alternatif,
      nilai_alternatif: fuzzyAndKeterangan,
      dataAlternatifId: alternatifId,
      dataKriteriumId: kriteriaId
    });
    alert("Data Alternatif Berhasil Di Input");
    navigate(`/nilai_alternatif`);
  } catch (e) {
    console.log("error dalam submit data :", e.response.msg);
    alert(e.response.data.msg);
  }
};
  const getAlternatif = async(data) =>{
    const response = await axios.get("/alternatif", data);
    setAmbilAlt(response.data);
  }
  const getKriteria = async(data) =>{
    const response = await axios.get("/kriteria", data);
    setAmbilKriteria(response.data);
  }
  // const getNilaiAlternatif = async(data)=>{
  //   const response = await axios.get("/nilai_alternatif", data);
  //   setExistingData(response.data);
  // }
  useEffect(() => {
    // getNilaiAlternatif();
    getAlternatif();
    getKriteria();
}, []);

  return (
    <div className="add-nilaialt-column">
        <h2 className="add-nilaialt-judul">Tambah Data Alternatif</h2>
      <form onSubmit={onSubmit}>
      {/* <p>{msg}</p> */}
      <div className="field">
            <label className="label">Nama Alternatif ( Siswa )</label>
            <div className="control">
              <div className="select">
                <input
                  type="text"
                  id="inputBox"
                  list="suggestions"
                  value={alternatif}
                  onChange={(e) => setAlternatif(e.target.value)}
                />
              </div>
            </div>
          </div>
          {ambilKriteria.map((item) => (
        <div className="field" key={item.id}>
          <label className="label">{item.nama_kriteria}</label>
          <div className="control">
            <input
              type="text"
              className="input"
              value={nilai_real[item.nama_kriteria] || ''}
              onChange={(e) => setNilaiReal(prevState => ({
                ...prevState,
                [item.nama_kriteria]: e.target.value
              }))}
              placeholder={`Nilai ${item.nama_kriteria}`}
            ></input>
          </div>
        </div>
      ))}
          
          <div className="btn-field">
            <Link to={`/nilai_alternatif`} className="action-btn">
              Kembali
            </Link>
            <button type="submit" className="action-btn">
              Save
            </button>
          </div>
      </form>
      </div>
  );
}

switch (activeTab) {
      case 'tab1':
        return <div className='konten'>Konten Tab 1</div>;
      case 'tab2':
        return <div className='konten'>Konten Tab 2</div>;
      case 'tab3':
        return <div className='konten'>Konten Tab 3</div>;
      default:
        return null;
    }

  return (
    <div>
      <div className="tabs">
        <button onClick={() => setActiveTab('tab1')}>Tab 1</button>
        <button onClick={() => setActiveTab('tab2')}>Tab 2</button>
        <button onClick={() => setActiveTab('tab3')}>Tab 3</button>
      </div>
      <div className="content">
        {renderContent()}
      </div>
    </div>
  );